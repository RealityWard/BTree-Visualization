/**
Desc: For making new unit tests using NUnit module.
Reference: https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit
*/
using BTreeVisualization;
using NodeData;
using System.Threading.Tasks.Dataflow;

namespace RangeOperationTesting
{
  /// <summary>
  /// Tests for threading properly ordered messages. 
  /// </summary>
  /// <remarks>Author: Tristan Anderson</remarks>
  [TestFixture(3, 1000)]
  // [TestFixture(5, 1000)]
  // [TestFixture(5, 10000)]
  // [TestFixture(5, 100000)]
  // [TestFixture(50, 1000000)]
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
  public partial class RangeTests(int degree, int numKeys)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
  {
    private BufferBlock<(NodeStatus status, long id, int numKeys, int[] keys
      , Person?[] contents, long altID, int altNumKeys, int[] altKeys
      , Person?[] altContents)> _OutputBuffer = new(new DataflowBlockOptions { BoundedCapacity = 20 });
    private BufferBlock<(TreeCommand action, int key, int endKey
      , Person? content)> _InputBuffer = new(new DataflowBlockOptions { BoundedCapacity = 10 });
    private List<(NodeStatus status, long id, int numKeys, int[] keys
      , Person?[] contents, long altID, int altNumKeys, int[] altKeys
      , Person?[] altContents)> _OutputBufferHistory = [];
    private List<(TreeCommand action, int key, int endKey
      , Person? content)> _InputBufferHistory = [];
    List<int> keys = [];
    private readonly int _NumberOfKeys = numKeys;
    private Task? _Producer;
    private Task? _Consumer;
    private BTree<Person> _Tree;

    private List<int> asdf = [];
    private List<int> qwerty = [];

    /// <summary>
    /// NUnit setup for this class. 
    /// </summary>
    /// <remarks>Author: Tristan Anderson</remarks>
    [SetUp]
    public void Setup()
    {
      _OutputBuffer = new(new DataflowBlockOptions { BoundedCapacity = 20 });
      _InputBuffer = new(new DataflowBlockOptions { BoundedCapacity = 10 });
      _OutputBufferHistory = [];
      _InputBufferHistory = [];
      keys = [];
      qwerty.Add(936764);
      qwerty.Add(194366);
      qwerty.Add(105424);
      qwerty.Add(747087);
      qwerty.Add(845012);
      qwerty.Add(552964);
      qwerty.Add(913926);
      qwerty.Add(768911);
      qwerty.Add(33279);
      qwerty.Add(141045);
      qwerty.Add(404172);
      qwerty.Add(809688);
      qwerty.Add(882948);
      qwerty.Add(21052);
      qwerty.Add(887411);
      qwerty.Add(983890);
      qwerty.Add(748856);
      qwerty.Add(571464);
      qwerty.Add(692461);
      qwerty.Add(957403);
      qwerty.Add(738124);
      qwerty.Add(144149);
      qwerty.Add(864025);
      qwerty.Add(676676);
      qwerty.Add(517137);
      qwerty.Add(502333);
      qwerty.Add(419324);
      qwerty.Add(846103);
      qwerty.Add(9409);
      qwerty.Add(474573);
      qwerty.Add(991519);
      qwerty.Add(258773);
      qwerty.Add(896463);
      qwerty.Add(472406);
      qwerty.Add(495587);
      qwerty.Add(992825);
      qwerty.Add(789704);
      qwerty.Add(630706);
      qwerty.Add(502189);
      qwerty.Add(722049);
      qwerty.Add(175366);
      qwerty.Add(657982);
      qwerty.Add(496254);
      qwerty.Add(514634);
      qwerty.Add(229812);
      qwerty.Add(188171);
      qwerty.Add(522362);
      qwerty.Add(500357);
      qwerty.Add(803098);
      qwerty.Add(417755);
      qwerty.Add(606057);
      qwerty.Add(90528);
      qwerty.Add(666635);
      qwerty.Add(864739);
      qwerty.Add(672776);
      qwerty.Add(275488);
      qwerty.Add(955431);
      qwerty.Add(416464);
      qwerty.Add(428297);
      qwerty.Add(40402);
      qwerty.Add(64130);
      qwerty.Add(896770);
      qwerty.Add(577183);
      qwerty.Add(134207);
      qwerty.Add(398973);
      qwerty.Add(605154);
      qwerty.Add(684527);
      qwerty.Add(809344);
      qwerty.Add(137919);
      qwerty.Add(622467);
      qwerty.Add(125396);
      qwerty.Add(912825);
      qwerty.Add(678360);
      qwerty.Add(580187);
      qwerty.Add(227295);
      qwerty.Add(774815);
      qwerty.Add(128164);
      qwerty.Add(459573);
      qwerty.Add(42408);
      qwerty.Add(743894);
      qwerty.Add(20490);
      qwerty.Add(971011);
      qwerty.Add(430758);
      qwerty.Add(688999);
      qwerty.Add(455086);
      qwerty.Add(261876);
      qwerty.Add(751234);
      qwerty.Add(36240);
      qwerty.Add(492220);
      qwerty.Add(739019);
      qwerty.Add(674787);
      qwerty.Add(115070);
      qwerty.Add(513500);
      qwerty.Add(10028);
      qwerty.Add(183775);
      qwerty.Add(901214);
      qwerty.Add(277825);
      qwerty.Add(644027);
      qwerty.Add(914339);
      qwerty.Add(995564);
      qwerty.Add(944789);
      qwerty.Add(263293);
      qwerty.Add(5872);
      qwerty.Add(624820);
      qwerty.Add(848917);
      qwerty.Add(670322);
      qwerty.Add(54242);
      qwerty.Add(592297);
      qwerty.Add(367576);
      qwerty.Add(298238);
      qwerty.Add(661436);
      qwerty.Add(457141);
      qwerty.Add(605407);
      qwerty.Add(29530);
      qwerty.Add(191942);
      qwerty.Add(25214);
      qwerty.Add(592072);
      qwerty.Add(8277);
      qwerty.Add(383252);
      qwerty.Add(766245);
      qwerty.Add(396863);
      qwerty.Add(857789);
      qwerty.Add(999892);
      qwerty.Add(220076);
      qwerty.Add(592051);
      qwerty.Add(632739);
      qwerty.Add(534435);
      qwerty.Add(286703);
      qwerty.Add(956531);
      qwerty.Add(68574);
      qwerty.Add(872798);
      qwerty.Add(794686);
      qwerty.Add(493125);
      qwerty.Add(274083);
      qwerty.Add(764858);
      qwerty.Add(531312);
      qwerty.Add(569397);
      qwerty.Add(187541);
      qwerty.Add(74084);
      qwerty.Add(725190);
      qwerty.Add(974001);
      qwerty.Add(926364);
      qwerty.Add(110744);
      qwerty.Add(904405);
      qwerty.Add(186099);
      qwerty.Add(535308);
      qwerty.Add(194975);
      qwerty.Add(90713);
      qwerty.Add(32405);
      qwerty.Add(118248);
      qwerty.Add(200274);
      qwerty.Add(813037);
      qwerty.Add(768468);
      qwerty.Add(950194);
      qwerty.Add(997441);
      qwerty.Add(644543);
      qwerty.Add(518233);
      qwerty.Add(816518);
      qwerty.Add(320451);
      qwerty.Add(474257);
      qwerty.Add(893219);
      qwerty.Add(275932);
      qwerty.Add(431954);
      qwerty.Add(29574);
      qwerty.Add(46333);
      qwerty.Add(414322);
      qwerty.Add(825819);
      qwerty.Add(601974);
      qwerty.Add(559768);
      qwerty.Add(701446);
      qwerty.Add(765294);
      qwerty.Add(634199);
      qwerty.Add(65342);
      qwerty.Add(529333);
      qwerty.Add(939715);
      qwerty.Add(187777);
      qwerty.Add(200780);
      qwerty.Add(923117);
      qwerty.Add(221088);
      qwerty.Add(489998);
      qwerty.Add(907942);
      qwerty.Add(642969);
      qwerty.Add(634858);
      qwerty.Add(997413);
      qwerty.Add(258019);
      qwerty.Add(85805);
      qwerty.Add(886664);
      qwerty.Add(605850);
      qwerty.Add(833609);
      qwerty.Add(107292);
      qwerty.Add(215984);
      qwerty.Add(885221);
      qwerty.Add(931184);
      qwerty.Add(843187);
      qwerty.Add(559382);
      qwerty.Add(855995);
      qwerty.Add(948706);
      qwerty.Add(849998);
      qwerty.Add(821918);
      qwerty.Add(789601);
      qwerty.Add(970695);
      qwerty.Add(223635);
      qwerty.Add(134054);
      qwerty.Add(481787);
      qwerty.Add(240545);
      qwerty.Add(36141);
      qwerty.Add(565230);
      qwerty.Add(209980);
      qwerty.Add(840810);
      qwerty.Add(925387);
      qwerty.Add(401694);
      qwerty.Add(735006);
      qwerty.Add(713256);
      qwerty.Add(977605);
      qwerty.Add(642050);
      qwerty.Add(533773);
      qwerty.Add(792865);
      qwerty.Add(57516);
      qwerty.Add(623627);
      qwerty.Add(212278);
      qwerty.Add(941073);
      qwerty.Add(179170);
      qwerty.Add(35398);
      qwerty.Add(346481);
      qwerty.Add(488542);
      qwerty.Add(882209);
      qwerty.Add(410092);
      qwerty.Add(219381);
      qwerty.Add(947452);
      qwerty.Add(212260);
      qwerty.Add(216775);
      qwerty.Add(520574);
      qwerty.Add(900133);
      qwerty.Add(547104);
      qwerty.Add(70246);
      qwerty.Add(36948);
      qwerty.Add(307445);
      qwerty.Add(588682);
      qwerty.Add(119971);
      qwerty.Add(313203);
      qwerty.Add(407318);
      qwerty.Add(145996);
      qwerty.Add(564634);
      qwerty.Add(997989);
      qwerty.Add(641673);
      qwerty.Add(586532);
      qwerty.Add(503049);
      qwerty.Add(601366);
      qwerty.Add(818465);
      qwerty.Add(884909);
      qwerty.Add(513679);
      qwerty.Add(399916);
      qwerty.Add(628233);
      qwerty.Add(965902);
      qwerty.Add(727403);
      qwerty.Add(562273);
      qwerty.Add(571987);
      qwerty.Add(665184);
      qwerty.Add(592088);
      qwerty.Add(145414);
      qwerty.Add(722887);
      qwerty.Add(962466);
      qwerty.Add(257789);
      qwerty.Add(387624);
      qwerty.Add(512635);
      qwerty.Add(873908);
      qwerty.Add(531996);
      qwerty.Add(38264);
      qwerty.Add(61817);
      qwerty.Add(366645);
      qwerty.Add(732342);
      qwerty.Add(359770);
      qwerty.Add(20146);
      qwerty.Add(311889);
      qwerty.Add(153612);
      qwerty.Add(826037);
      qwerty.Add(413630);
      qwerty.Add(666936);
      qwerty.Add(533276);
      qwerty.Add(186657);
      qwerty.Add(883164);
      qwerty.Add(281106);
      qwerty.Add(795781);
      qwerty.Add(542339);
      qwerty.Add(159505);
      qwerty.Add(389903);
      qwerty.Add(550639);
      qwerty.Add(259300);
      qwerty.Add(858709);
      qwerty.Add(929702);
      qwerty.Add(702628);
      qwerty.Add(613223);
      qwerty.Add(501059);
      qwerty.Add(234339);
      qwerty.Add(854704);
      qwerty.Add(218213);
      qwerty.Add(928988);
      qwerty.Add(597043);
      qwerty.Add(930170);
      qwerty.Add(246221);
      qwerty.Add(152737);
      qwerty.Add(775528);
      qwerty.Add(796035);
      qwerty.Add(709460);
      qwerty.Add(282735);
      qwerty.Add(463662);
      qwerty.Add(842241);
      qwerty.Add(878784);
      qwerty.Add(225049);
      qwerty.Add(281737);
      qwerty.Add(436171);
      qwerty.Add(893135);
      qwerty.Add(178736);
      qwerty.Add(215122);
      qwerty.Add(950291);
      qwerty.Add(209569);
      qwerty.Add(578743);
      qwerty.Add(535301);
      qwerty.Add(14311);
      qwerty.Add(952835);
      qwerty.Add(83508);
      qwerty.Add(411222);
      qwerty.Add(525998);
      qwerty.Add(659401);
      qwerty.Add(104161);
      qwerty.Add(811847);
      qwerty.Add(525217);
      qwerty.Add(64703);
      qwerty.Add(8013);
      qwerty.Add(613626);
      qwerty.Add(343265);
      qwerty.Add(401984);
      qwerty.Add(413177);
      qwerty.Add(296044);
      qwerty.Add(876155);
      qwerty.Add(562546);
      qwerty.Add(584652);
      qwerty.Add(690722);
      qwerty.Add(760433);
      qwerty.Add(607605);
      qwerty.Add(586729);
      qwerty.Add(693067);
      qwerty.Add(385225);
      qwerty.Add(981041);
      qwerty.Add(66630);
      qwerty.Add(126593);
      qwerty.Add(882796);
      qwerty.Add(453501);
      qwerty.Add(128331);
      qwerty.Add(784804);
      qwerty.Add(228731);
      qwerty.Add(955623);
      qwerty.Add(843293);
      qwerty.Add(894942);
      qwerty.Add(856158);
      qwerty.Add(17545);
      qwerty.Add(130780);
      qwerty.Add(999650);
      qwerty.Add(697045);
      qwerty.Add(502931);
      qwerty.Add(523216);
      qwerty.Add(579885);
      qwerty.Add(734734);
      qwerty.Add(189326);
      qwerty.Add(6673);
      qwerty.Add(83739);
      qwerty.Add(369806);
      qwerty.Add(799376);
      qwerty.Add(484926);
      qwerty.Add(547069);
      qwerty.Add(975575);
      qwerty.Add(809742);
      qwerty.Add(601473);
      qwerty.Add(376231);
      qwerty.Add(288494);
      qwerty.Add(144788);
      qwerty.Add(496336);
      qwerty.Add(520917);
      qwerty.Add(488382);
      qwerty.Add(966068);
      qwerty.Add(335825);
      qwerty.Add(890442);
      qwerty.Add(536846);
      qwerty.Add(44032);
      qwerty.Add(34327);
      qwerty.Add(534378);
      qwerty.Add(419497);
      qwerty.Add(689555);
      qwerty.Add(374259);
      qwerty.Add(742862);
      qwerty.Add(227453);
      qwerty.Add(771016);
      qwerty.Add(136982);
      qwerty.Add(670677);
      qwerty.Add(509521);
      qwerty.Add(787694);
      qwerty.Add(227735);
      qwerty.Add(18795);
      qwerty.Add(439128);
      qwerty.Add(15215);
      qwerty.Add(32843);
      qwerty.Add(199380);
      qwerty.Add(755015);
      qwerty.Add(223253);
      qwerty.Add(665282);
      qwerty.Add(761910);
      qwerty.Add(885283);
      qwerty.Add(13813);
      qwerty.Add(650547);
      qwerty.Add(12456);
      qwerty.Add(650698);
      qwerty.Add(802707);
      qwerty.Add(393251);
      qwerty.Add(366592);
      qwerty.Add(346156);
      qwerty.Add(530602);
      qwerty.Add(717575);
      qwerty.Add(844886);
      qwerty.Add(465006);
      qwerty.Add(759551);
      qwerty.Add(101700);
      qwerty.Add(767318);
      qwerty.Add(431095);
      qwerty.Add(566898);
      qwerty.Add(204144);
      qwerty.Add(112047);
      qwerty.Add(647336);
      qwerty.Add(452330);
      qwerty.Add(165300);
      qwerty.Add(303555);
      qwerty.Add(628721);
      qwerty.Add(925367);
      qwerty.Add(741414);
      qwerty.Add(573078);
      qwerty.Add(240453);
      qwerty.Add(850575);
      qwerty.Add(819609);
      qwerty.Add(680132);
      qwerty.Add(661130);
      qwerty.Add(944347);
      qwerty.Add(879089);
      qwerty.Add(90417);
      qwerty.Add(410576);
      qwerty.Add(812053);
      qwerty.Add(774266);
      qwerty.Add(773340);
      qwerty.Add(320364);
      qwerty.Add(87618);
      qwerty.Add(879038);
      qwerty.Add(641382);
      qwerty.Add(205699);
      qwerty.Add(980498);
      qwerty.Add(465959);
      qwerty.Add(652831);
      qwerty.Add(443235);
      qwerty.Add(394540);
      qwerty.Add(185171);
      qwerty.Add(81678);
      qwerty.Add(435972);
      qwerty.Add(397649);
      qwerty.Add(75165);
      qwerty.Add(514130);
      qwerty.Add(569424);
      qwerty.Add(756189);
      qwerty.Add(795056);
      qwerty.Add(764325);
      qwerty.Add(907090);
      qwerty.Add(472183);
      qwerty.Add(338153);
      qwerty.Add(446151);
      qwerty.Add(370120);
      qwerty.Add(969891);
      qwerty.Add(591198);
      qwerty.Add(77444);
      qwerty.Add(395407);
      qwerty.Add(561859);
      qwerty.Add(426523);
      qwerty.Add(709919);
      qwerty.Add(534053);
      qwerty.Add(935858);
      qwerty.Add(470397);
      qwerty.Add(788971);
      qwerty.Add(2069);
      qwerty.Add(747317);
      qwerty.Add(94868);
      qwerty.Add(466270);
      qwerty.Add(831423);
      qwerty.Add(317941);
      qwerty.Add(592036);
      qwerty.Add(927251);
      qwerty.Add(924304);
      qwerty.Add(727943);
      qwerty.Add(848668);
      qwerty.Add(936282);
      qwerty.Add(904191);
      qwerty.Add(418900);
      qwerty.Add(994604);
      qwerty.Add(775752);
      qwerty.Add(800338);
      qwerty.Add(484824);
      qwerty.Add(930833);
      qwerty.Add(504964);
      qwerty.Add(334341);
      qwerty.Add(921195);
      qwerty.Add(552067);
      qwerty.Add(578106);
      qwerty.Add(973620);
      qwerty.Add(569053);
      qwerty.Add(189142);
      qwerty.Add(865388);
      qwerty.Add(682515);
      qwerty.Add(872494);
      qwerty.Add(817578);
      qwerty.Add(654453);
      qwerty.Add(860379);
      qwerty.Add(478538);
      qwerty.Add(346651);
      qwerty.Add(44185);
      qwerty.Add(320313);
      qwerty.Add(974776);
      qwerty.Add(664555);
      qwerty.Add(864295);
      qwerty.Add(503920);
      qwerty.Add(716319);
      qwerty.Add(262047);
      qwerty.Add(441827);
      qwerty.Add(331361);
      qwerty.Add(729781);
      qwerty.Add(285117);
      qwerty.Add(626612);
      qwerty.Add(641900);
      qwerty.Add(462107);
      qwerty.Add(826036);
      qwerty.Add(898111);
      qwerty.Add(713257);
      qwerty.Add(484378);
      qwerty.Add(768740);
      qwerty.Add(942112);
      qwerty.Add(261732);
      qwerty.Add(545383);
      qwerty.Add(598465);
      qwerty.Add(30499);
      qwerty.Add(238112);
      qwerty.Add(435876);
      qwerty.Add(979473);
      qwerty.Add(986279);
      qwerty.Add(634533);
      qwerty.Add(15220);
      qwerty.Add(352829);
      qwerty.Add(339143);
      qwerty.Add(284644);
      qwerty.Add(973183);
      qwerty.Add(464634);
      qwerty.Add(556830);
      qwerty.Add(133184);
      qwerty.Add(812749);
      qwerty.Add(146952);
      qwerty.Add(693012);
      qwerty.Add(583199);
      qwerty.Add(774066);
      qwerty.Add(468440);
      qwerty.Add(812148);
      qwerty.Add(835269);
      qwerty.Add(640742);
      qwerty.Add(255986);
      qwerty.Add(682054);
      qwerty.Add(498209);
      qwerty.Add(591849);
      qwerty.Add(368201);
      qwerty.Add(166588);
      qwerty.Add(239052);
      qwerty.Add(977846);
      qwerty.Add(788163);
      qwerty.Add(712695);
      qwerty.Add(540984);
      qwerty.Add(974334);
      qwerty.Add(286849);
      qwerty.Add(343452);
      qwerty.Add(127115);
      qwerty.Add(693808);
      qwerty.Add(588184);
      qwerty.Add(709353);
      qwerty.Add(539413);
      qwerty.Add(761877);
      qwerty.Add(252839);
      qwerty.Add(112253);
      qwerty.Add(53840);
      qwerty.Add(371015);
      qwerty.Add(583640);
      qwerty.Add(93935);
      qwerty.Add(40786);
      qwerty.Add(725481);
      qwerty.Add(16375);
      qwerty.Add(530896);
      qwerty.Add(937413);
      qwerty.Add(584757);
      qwerty.Add(473961);
      qwerty.Add(252785);
      qwerty.Add(16911);
      qwerty.Add(358112);
      qwerty.Add(103282);
      qwerty.Add(950442);
      qwerty.Add(327669);
      qwerty.Add(607656);
      qwerty.Add(474440);
      qwerty.Add(634797);
      qwerty.Add(417844);
      qwerty.Add(987982);
      qwerty.Add(383574);
      qwerty.Add(386739);
      qwerty.Add(284238);
      qwerty.Add(371290);
      qwerty.Add(352103);
      qwerty.Add(830653);
      qwerty.Add(612102);
      qwerty.Add(878220);
      qwerty.Add(826060);
      qwerty.Add(369082);
      qwerty.Add(743600);
      qwerty.Add(858970);
      qwerty.Add(307184);
      qwerty.Add(737731);
      qwerty.Add(963730);
      qwerty.Add(459569);
      qwerty.Add(663551);
      qwerty.Add(599702);
      qwerty.Add(899242);
      qwerty.Add(394387);
      qwerty.Add(331650);
      qwerty.Add(909149);
      qwerty.Add(697812);
      qwerty.Add(105686);
      qwerty.Add(818908);
      qwerty.Add(554673);
      qwerty.Add(39306);
      qwerty.Add(165554);
      qwerty.Add(723970);
      qwerty.Add(974882);
      qwerty.Add(640772);
      qwerty.Add(215824);
      qwerty.Add(769082);
      qwerty.Add(958389);
      qwerty.Add(323325);
      qwerty.Add(499896);
      qwerty.Add(537856);
      qwerty.Add(365309);
      qwerty.Add(594530);
      qwerty.Add(150225);
      qwerty.Add(883220);
      qwerty.Add(986365);
      qwerty.Add(197541);
      qwerty.Add(862000);
      qwerty.Add(420145);
      qwerty.Add(6849);
      qwerty.Add(491879);
      qwerty.Add(300993);
      qwerty.Add(384917);
      qwerty.Add(481656);
      qwerty.Add(702294);
      qwerty.Add(481935);
      qwerty.Add(766378);
      qwerty.Add(172725);
      qwerty.Add(76890);
      qwerty.Add(343166);
      qwerty.Add(967375);
      qwerty.Add(532517);
      qwerty.Add(803173);
      qwerty.Add(285805);
      qwerty.Add(545371);
      qwerty.Add(971574);
      qwerty.Add(331215);
      qwerty.Add(815582);
      qwerty.Add(532625);
      qwerty.Add(178604);
      qwerty.Add(702990);
      qwerty.Add(368679);
      qwerty.Add(974353);
      qwerty.Add(73808);
      qwerty.Add(389981);
      qwerty.Add(100325);
      qwerty.Add(430301);
      qwerty.Add(949188);
      qwerty.Add(230179);
      qwerty.Add(858596);
      qwerty.Add(594679);
      qwerty.Add(658611);
      qwerty.Add(762745);
      qwerty.Add(534040);
      qwerty.Add(856559);
      qwerty.Add(281199);
      qwerty.Add(415127);
      qwerty.Add(768068);
      qwerty.Add(3070);
      qwerty.Add(463558);
      qwerty.Add(66232);
      qwerty.Add(794281);
      qwerty.Add(904478);
      qwerty.Add(665431);
      qwerty.Add(459860);
      qwerty.Add(743653);
      qwerty.Add(105874);
      qwerty.Add(480673);
      qwerty.Add(494330);
      qwerty.Add(253164);
      qwerty.Add(761622);
      qwerty.Add(406719);
      qwerty.Add(76799);
      qwerty.Add(976616);
      qwerty.Add(422524);
      qwerty.Add(73801);
      qwerty.Add(528983);
      qwerty.Add(609078);
      qwerty.Add(897132);
      qwerty.Add(492443);
      qwerty.Add(951727);
      qwerty.Add(465463);
      qwerty.Add(789841);
      qwerty.Add(251219);
      qwerty.Add(297853);
      qwerty.Add(999765);
      qwerty.Add(593042);
      qwerty.Add(882549);
      qwerty.Add(825261);
      qwerty.Add(842161);
      qwerty.Add(26465);
      qwerty.Add(46935);
      qwerty.Add(201316);
      qwerty.Add(73106);
      qwerty.Add(700091);
      qwerty.Add(671909);
      qwerty.Add(43678);
      qwerty.Add(553337);
      qwerty.Add(556100);
      qwerty.Add(453927);
      qwerty.Add(301703);
      qwerty.Add(90415);
      qwerty.Add(528878);
      qwerty.Add(103750);
      qwerty.Add(768447);
      qwerty.Add(204819);
      qwerty.Add(346224);
      qwerty.Add(247323);
      qwerty.Add(220939);
      qwerty.Add(696915);
      qwerty.Add(402992);
      qwerty.Add(15569);
      qwerty.Add(299404);
      qwerty.Add(210833);
      qwerty.Add(712516);
      qwerty.Add(113240);
      qwerty.Add(775558);
      qwerty.Add(787038);
      qwerty.Add(991185);
      qwerty.Add(746070);
      qwerty.Add(477231);
      qwerty.Add(320509);
      qwerty.Add(667639);
      qwerty.Add(149248);
      qwerty.Add(380232);
      qwerty.Add(396743);
      qwerty.Add(88365);
      qwerty.Add(479690);
      qwerty.Add(8067);
      qwerty.Add(573729);
      qwerty.Add(900467);
      qwerty.Add(46011);
      qwerty.Add(535199);
      qwerty.Add(854099);
      qwerty.Add(508052);
      qwerty.Add(96081);
      qwerty.Add(591990);
      qwerty.Add(90101);
      qwerty.Add(691624);
      qwerty.Add(30624);
      qwerty.Add(749288);
      qwerty.Add(139577);
      qwerty.Add(54095);
      qwerty.Add(439999);
      qwerty.Add(771792);
      qwerty.Add(30041);
      qwerty.Add(899251);
      qwerty.Add(804128);
      qwerty.Add(372280);
      qwerty.Add(830442);
      qwerty.Add(281449);
      qwerty.Add(633869);
      qwerty.Add(863638);
      qwerty.Add(246134);
      qwerty.Add(455255);
      qwerty.Add(578028);
      qwerty.Add(978661);
      qwerty.Add(129376);
      qwerty.Add(627748);
      qwerty.Add(389597);
      qwerty.Add(829908);
      qwerty.Add(15713);
      qwerty.Add(655507);
      qwerty.Add(735036);
      qwerty.Add(85563);
      qwerty.Add(545136);
      qwerty.Add(132950);
      qwerty.Add(794916);
      qwerty.Add(254097);
      qwerty.Add(237512);
      qwerty.Add(602363);
      qwerty.Add(733209);
      qwerty.Add(247839);
      qwerty.Add(156262);
      qwerty.Add(436281);
      qwerty.Add(143501);
      qwerty.Add(643024);
      qwerty.Add(447383);
      qwerty.Add(433158);
      qwerty.Add(979752);
      qwerty.Add(56826);
      qwerty.Add(448779);
      qwerty.Add(574294);
      qwerty.Add(64293);
      qwerty.Add(445867);
      qwerty.Add(706218);
      qwerty.Add(40812);
      qwerty.Add(246631);
      qwerty.Add(653209);
      qwerty.Add(226369);
      qwerty.Add(978926);
      qwerty.Add(805180);
      qwerty.Add(51743);
      qwerty.Add(640425);
      qwerty.Add(393339);
      qwerty.Add(877383);
      qwerty.Add(627431);
      qwerty.Add(197328);
      qwerty.Add(764815);
      qwerty.Add(559956);
      qwerty.Add(824875);
      qwerty.Add(914706);
      qwerty.Add(332922);
      qwerty.Add(782215);
      qwerty.Add(751246);
      qwerty.Add(711035);
      qwerty.Add(736915);
      qwerty.Add(77328);
      qwerty.Add(469810);
      qwerty.Add(778498);
      qwerty.Add(543847);
      qwerty.Add(195975);
      qwerty.Add(959223);
      qwerty.Add(481309);
      qwerty.Add(509506);
      qwerty.Add(7841);
      qwerty.Add(134230);
      qwerty.Add(727042);
      qwerty.Add(837876);
      qwerty.Add(848637);
      qwerty.Add(166952);
      qwerty.Add(405676);
      qwerty.Add(711711);
      qwerty.Add(494807);
      qwerty.Add(360793);
      qwerty.Add(377216);
      qwerty.Add(328230);
      qwerty.Add(231130);
      qwerty.Add(918859);
      qwerty.Add(1811);
      qwerty.Add(69909);
      qwerty.Add(182472);
      qwerty.Add(98075);
      qwerty.Add(422237);
      qwerty.Add(461029);
      qwerty.Add(798878);
      qwerty.Add(469365);
      qwerty.Add(611928);
      qwerty.Add(788028);
      qwerty.Add(719745);
      qwerty.Add(711825);
      qwerty.Add(306936);
      qwerty.Add(402593);
      qwerty.Add(985304);
      qwerty.Add(252156);
      qwerty.Add(711837);
      qwerty.Add(318346);
      qwerty.Add(699751);
      qwerty.Add(149389);
      qwerty.Add(337104);
      qwerty.Add(229464);
      qwerty.Add(698865);
      qwerty.Add(598953);
      qwerty.Add(99120);
      qwerty.Add(243690);
      qwerty.Add(283133);
      qwerty.Add(244422);
      qwerty.Add(637583);
      qwerty.Add(971194);
      qwerty.Add(376241);
      qwerty.Add(198305);
      qwerty.Add(163874);
      qwerty.Add(647074);
      qwerty.Add(666704);
      qwerty.Add(70565);
      qwerty.Add(27785);
      qwerty.Add(185162);
      qwerty.Add(948162);
      qwerty.Add(6312);
      qwerty.Add(760648);
      qwerty.Add(534431);
      qwerty.Add(162019);
      qwerty.Add(209364);
      qwerty.Add(231615);
      qwerty.Add(432498);
      qwerty.Add(93989);
      qwerty.Add(572337);
      qwerty.Add(567543);
      qwerty.Add(126440);
      qwerty.Add(662789);
      qwerty.Add(233624);
      qwerty.Add(653033);
      qwerty.Add(232797);
      qwerty.Add(438496);
      qwerty.Add(903912);
      qwerty.Add(553);
      qwerty.Add(956081);
      qwerty.Add(231303);
      qwerty.Add(588844);
      qwerty.Add(270885);
      qwerty.Add(394939);
      qwerty.Add(266698);
      qwerty.Add(403679);
      qwerty.Add(819224);
      qwerty.Add(385369);
      qwerty.Add(640696);
      qwerty.Add(627949);
      qwerty.Add(814242);
      qwerty.Add(903333);
      qwerty.Add(382891);
      qwerty.Add(122971);
      qwerty.Add(332206);
      qwerty.Add(536907);
      qwerty.Add(291038);
      qwerty.Add(436840);
      qwerty.Add(547473);
      qwerty.Add(238211);
      qwerty.Add(103039);
      qwerty.Add(149332);
      qwerty.Add(138432);
      qwerty.Add(108464);
      qwerty.Add(396386);
      qwerty.Add(886663);
      qwerty.Add(710188);
      qwerty.Add(670882);
      qwerty.Add(51355);
      qwerty.Add(623036);
      qwerty.Add(945060);
      qwerty.Add(494233);
      qwerty.Add(1566);
      qwerty.Add(567956);
      qwerty.Add(3639);
      qwerty.Add(620060);
      qwerty.Add(901080);
      qwerty.Add(971704);
      qwerty.Add(537029);
      qwerty.Add(783341);
      qwerty.Add(810356);
      qwerty.Add(382233);
      qwerty.Add(999709);
      qwerty.Add(844615);
      qwerty.Add(857586);
      qwerty.Add(479899);
      qwerty.Add(660679);
      qwerty.Add(969241);
      qwerty.Add(816918);
      qwerty.Add(222781);
      qwerty.Add(774959);
      qwerty.Add(30835);
      qwerty.Add(384410);
      qwerty.Add(261573);
      qwerty.Add(306672);
      qwerty.Add(128836);
      qwerty.Add(388555);
      qwerty.Add(33684);
      qwerty.Add(298893);
      qwerty.Add(838378);
      qwerty.Add(728925);
      qwerty.Add(307254);
      qwerty.Add(352561);
      qwerty.Add(158926);
      qwerty.Add(82605);
      qwerty.Add(221902);
      qwerty.Add(252345);
      qwerty.Add(447904);
      qwerty.Add(721477);
      qwerty.Add(298317);
      qwerty.Add(204678);
      qwerty.Add(535899);
      qwerty.Add(792730);
      qwerty.Add(278295);
      qwerty.Add(639914);
      qwerty.Add(318273);
      qwerty.Add(538096);
      qwerty.Add(93282);
      qwerty.Add(585877);
      asdf.Add(941073);
      asdf.Add(942112);
      asdf.Add(944347);
      asdf.Add(944789);
      asdf.Add(945060);
      asdf.Add(947452);
      asdf.Add(948162);
      asdf.Add(948706);
      asdf.Add(949188);
      asdf.Add(950194);
      asdf.Add(950291);
      asdf.Add(950442);
      asdf.Add(225049);
      asdf.Add(226369);
      asdf.Add(227295);
      asdf.Add(227453);
      asdf.Add(227735);
      asdf.Add(228731);
      asdf.Add(229464);
      asdf.Add(229812);
      asdf.Add(230179);
      asdf.Add(231130);
      asdf.Add(231303);
      asdf.Add(231615);
      asdf.Add(232797);
      asdf.Add(233624);
      asdf.Add(234339);
      asdf.Add(488382);
      asdf.Add(488542);
      asdf.Add(489998);
      asdf.Add(491879);
      asdf.Add(492220);
      asdf.Add(492443);
      asdf.Add(493125);
      asdf.Add(494233);
      asdf.Add(494330);
      asdf.Add(494807);
      asdf.Add(495587);
      asdf.Add(496254);
      asdf.Add(496336);
      asdf.Add(498209);
      asdf.Add(674787);
      asdf.Add(676676);
      asdf.Add(678360);
      asdf.Add(680132);
      asdf.Add(682054);
      asdf.Add(682515);
      asdf.Add(684527);
      asdf.Add(783341);
      asdf.Add(784804);
      asdf.Add(787038);
      asdf.Add(787694);
      asdf.Add(788028);
      asdf.Add(788163);
      asdf.Add(788971);
      asdf.Add(789601);
      asdf.Add(789704);
      asdf.Add(789841);
      asdf.Add(792730);
      asdf.Add(792865);
      asdf.Add(30041);
      asdf.Add(30499);
      asdf.Add(30624);
      asdf.Add(30835);
      asdf.Add(32405);
      asdf.Add(32843);
      asdf.Add(33279);
      asdf.Add(33684);
      asdf.Add(34327);
      asdf.Add(35398);
      asdf.Add(36141);
      asdf.Add(36240);
      asdf.Add(36948);
      asdf.Add(38264);
      asdf.Add(39306);
      asdf.Add(969241);
      asdf.Add(969891);
      asdf.Add(970695);
      asdf.Add(971011);
      asdf.Add(971194);
      asdf.Add(971574);
      asdf.Add(971704);
      asdf.Add(973183);
      asdf.Add(973620);
      asdf.Add(974001);
      asdf.Add(974334);
      asdf.Add(974353);
      asdf.Add(974776);
      asdf.Add(974882);
      asdf.Add(975575);
      asdf.Add(976616);
      asdf.Add(977605);
      asdf.Add(977846);
      asdf.Add(978661);
      asdf.Add(978926);
      asdf.Add(54095);
      asdf.Add(54242);
      asdf.Add(56826);
      asdf.Add(57516);
      asdf.Add(61817);
      asdf.Add(628721);
      asdf.Add(630706);
      asdf.Add(632739);
      asdf.Add(633869);
      asdf.Add(634199);
      asdf.Add(634533);
      asdf.Add(634797);
      asdf.Add(634858);
      asdf.Add(637583);
      asdf.Add(201316);
      asdf.Add(204144);
      asdf.Add(204678);
      asdf.Add(204819);
      asdf.Add(205699);
      asdf.Add(209364);
      asdf.Add(209569);
      asdf.Add(209980);
      asdf.Add(210833);
      asdf.Add(775558);
      asdf.Add(775752);
      asdf.Add(778498);
      asdf.Add(782215);
      asdf.Add(909149);
      asdf.Add(912825);
      asdf.Add(913926);
      asdf.Add(914339);
      asdf.Add(914706);
      asdf.Add(918859);
      asdf.Add(175366);
      asdf.Add(178604);
      asdf.Add(178736);
      asdf.Add(179170);
      asdf.Add(182472);
      asdf.Add(183775);
      asdf.Add(185162);
      asdf.Add(185171);
      asdf.Add(882796);
      asdf.Add(882948);
      asdf.Add(883164);
      asdf.Add(883220);
      asdf.Add(884909);
      asdf.Add(885221);
      asdf.Add(885283);
      asdf.Add(886663);
      asdf.Add(886664);
      asdf.Add(887411);
      asdf.Add(890442);
      asdf.Add(641382);
      asdf.Add(641673);
      asdf.Add(641900);
      asdf.Add(642050);
      asdf.Add(642969);
      asdf.Add(643024);
      asdf.Add(644027);
      asdf.Add(644543);
      asdf.Add(647074);
      asdf.Add(647336);
      asdf.Add(650547);
      asdf.Add(650698);
      asdf.Add(520917);
      asdf.Add(522362);
      asdf.Add(523216);
      asdf.Add(525217);
      asdf.Add(525998);
      asdf.Add(528878);
      asdf.Add(528983);
      asdf.Add(529333);
      asdf.Add(530602);
      asdf.Add(530896);
      asdf.Add(285117);
      asdf.Add(285805);
      asdf.Add(286703);
      asdf.Add(286849);
      asdf.Add(288494);
      asdf.Add(291038);
      asdf.Add(474440);
      asdf.Add(474573);
      asdf.Add(477231);
      asdf.Add(478538);
      asdf.Add(479690);
      asdf.Add(479899);
      asdf.Add(480673);
      asdf.Add(481309);
      asdf.Add(481656);
      asdf.Add(481787);
      asdf.Add(481935);
      asdf.Add(484378);
      asdf.Add(194975);
      asdf.Add(195975);
      asdf.Add(197328);
      asdf.Add(197541);
      asdf.Add(198305);
      asdf.Add(199380);
      asdf.Add(200274);
      asdf.Add(200780);
      asdf.Add(710188);
      asdf.Add(711035);
      asdf.Add(711711);
      asdf.Add(711825);
      asdf.Add(711837);
      asdf.Add(712516);
      asdf.Add(712695);
      asdf.Add(713256);
      asdf.Add(713257);
      asdf.Add(716319);
      asdf.Add(717575);
      asdf.Add(719745);
      asdf.Add(186099);
      asdf.Add(186657);
      asdf.Add(187541);
      asdf.Add(187777);
      asdf.Add(188171);
      asdf.Add(189142);
      asdf.Add(189326);
      asdf.Add(191942);
      asdf.Add(194366);
      asdf.Add(68574);
      asdf.Add(69909);
      asdf.Add(70246);
      asdf.Add(70565);
      asdf.Add(73106);
      asdf.Add(73801);
      asdf.Add(73808);
      asdf.Add(74084);
      asdf.Add(75165);
      asdf.Add(76799);
      asdf.Add(76890);
      asdf.Add(77328);
      asdf.Add(77444);
      asdf.Add(709353);
      asdf.Add(709460);
      asdf.Add(709919);
      asdf.Add(129376);
      asdf.Add(130780);
      asdf.Add(132950);
      asdf.Add(133184);
      asdf.Add(134054);
      asdf.Add(134207);
      asdf.Add(134230);
      asdf.Add(136982);
      asdf.Add(137919);
      asdf.Add(138432);
      asdf.Add(110744);
      asdf.Add(112047);
      asdf.Add(112253);
      asdf.Add(113240);
      asdf.Add(115070);
      asdf.Add(118248);
      asdf.Add(119971);
      asdf.Add(81678);
      asdf.Add(82605);
      asdf.Add(83508);
      asdf.Add(83739);
      asdf.Add(85563);
      asdf.Add(85805);
      asdf.Add(87618);
      asdf.Add(88365);
      asdf.Add(90101);
      asdf.Add(90415);
      asdf.Add(90417);
      asdf.Add(90528);
      asdf.Add(90713);
      asdf.Add(831423);
      asdf.Add(833609);
      asdf.Add(835269);
      asdf.Add(837876);
      asdf.Add(838378);
      asdf.Add(840810);
      asdf.Add(928988);
      asdf.Add(929702);
      asdf.Add(930170);
      asdf.Add(930833);
      asdf.Add(931184);
      asdf.Add(935858);
      asdf.Add(936282);
      asdf.Add(936764);
      asdf.Add(937413);
      asdf.Add(259300);
      asdf.Add(261573);
      asdf.Add(261732);
      asdf.Add(261876);
      asdf.Add(262047);
      asdf.Add(263293);
      asdf.Add(266698);
      asdf.Add(46935);
      asdf.Add(51355);
      asdf.Add(51743);
      asdf.Add(53840);
      asdf.Add(585877);
      asdf.Add(586532);
      asdf.Add(586729);
      asdf.Add(588184);
      asdf.Add(588682);
      asdf.Add(588844);
      asdf.Add(591198);
      asdf.Add(591849);
      asdf.Add(591990);
      asdf.Add(592036);
      asdf.Add(592051);
      asdf.Add(592072);
      asdf.Add(592088);
      asdf.Add(592297);
      asdf.Add(593042);
      asdf.Add(594530);
      asdf.Add(594679);
      asdf.Add(275932);
      asdf.Add(277825);
      asdf.Add(278295);
      asdf.Add(281106);
      asdf.Add(281199);
      asdf.Add(281449);
      asdf.Add(281737);
      asdf.Add(282735);
      asdf.Add(283133);
      asdf.Add(284238);
      asdf.Add(284644);
      asdf.Add(8277);
      asdf.Add(9409);
      asdf.Add(10028);
      asdf.Add(12456);
      asdf.Add(13813);
      asdf.Add(14311);
      asdf.Add(15215);
      asdf.Add(15220);
      asdf.Add(15569);
      asdf.Add(15713);
      asdf.Add(16375);
      asdf.Add(16911);
      asdf.Add(17545);
      asdf.Add(980498);
      asdf.Add(981041);
      asdf.Add(983890);
      asdf.Add(985304);
      asdf.Add(986279);
      asdf.Add(986365);
      asdf.Add(987982);
      asdf.Add(690722);
      asdf.Add(691624);
      asdf.Add(692461);
      asdf.Add(693012);
      asdf.Add(693067);
      asdf.Add(693808);
      asdf.Add(696915);
      asdf.Add(697045);
      asdf.Add(697812);
      asdf.Add(698865);
      asdf.Add(699751);
      asdf.Add(700091);
      asdf.Add(850575);
      asdf.Add(854099);
      asdf.Add(854704);
      asdf.Add(855995);
      asdf.Add(856158);
      asdf.Add(856559);
      asdf.Add(857586);
      asdf.Add(857789);
      asdf.Add(858596);
      asdf.Add(858709);
      asdf.Add(858970);
      asdf.Add(860379);
      asdf.Add(597043);
      asdf.Add(598465);
      asdf.Add(598953);
      asdf.Add(599702);
      asdf.Add(601366);
      asdf.Add(601473);
      asdf.Add(601974);
      asdf.Add(602363);
      asdf.Add(605154);
      asdf.Add(605407);
      asdf.Add(605850);
      asdf.Add(606057);
      asdf.Add(222781);
      asdf.Add(223253);
      asdf.Add(223635);
      asdf.Add(815582);
      asdf.Add(816518);
      asdf.Add(816918);
      asdf.Add(817578);
      asdf.Add(818465);
      asdf.Add(818908);
      asdf.Add(819224);
      asdf.Add(819609);
      asdf.Add(821918);
      asdf.Add(824875);
      asdf.Add(825261);
      asdf.Add(611928);
      asdf.Add(612102);
      asdf.Add(613223);
      asdf.Add(613626);
      asdf.Add(620060);
      asdf.Add(103750);
      asdf.Add(104161);
      asdf.Add(105424);
      asdf.Add(105686);
      asdf.Add(105874);
      asdf.Add(107292);
      asdf.Add(108464);
      asdf.Add(849998);
      asdf.Add(438496);
      asdf.Add(439128);
      asdf.Add(439999);
      asdf.Add(441827);
      asdf.Add(443235);
      asdf.Add(445867);
      asdf.Add(446151);
      asdf.Add(447383);
      asdf.Add(447904);
      asdf.Add(583199);
      asdf.Add(583640);
      asdf.Add(584652);
      asdf.Add(584757);
      asdf.Add(254097);
      asdf.Add(255986);
      asdf.Add(257789);
      asdf.Add(258019);
      asdf.Add(258773);
      asdf.Add(20146);
      asdf.Add(20490);
      asdf.Add(21052);
      asdf.Add(25214);
      asdf.Add(26465);
      asdf.Add(27785);
      asdf.Add(29530);
      asdf.Add(29574);
      asdf.Add(300993);
      asdf.Add(301703);
      asdf.Add(303555);
      asdf.Add(306672);
      asdf.Add(306936);
      asdf.Add(307184);
      asdf.Add(307254);
      asdf.Add(307445);
      asdf.Add(6312);
      asdf.Add(6673);
      asdf.Add(6849);
      asdf.Add(7841);
      asdf.Add(8013);
      asdf.Add(8067);
      asdf.Add(64293);
      asdf.Add(64703);
      asdf.Add(65342);
      asdf.Add(66232);
      asdf.Add(66630);
      asdf.Add(212278);
      asdf.Add(215122);
      asdf.Add(215824);
      asdf.Add(215984);
      asdf.Add(216775);
      asdf.Add(218213);
      asdf.Add(219381);
      asdf.Add(220076);
      asdf.Add(220939);
      asdf.Add(221088);
      asdf.Add(221902);
      asdf.Add(432498);
      asdf.Add(433158);
      asdf.Add(435876);
      asdf.Add(435972);
      asdf.Add(436171);
      asdf.Add(436281);
      asdf.Add(436840);
      asdf.Add(320451);
      asdf.Add(320509);
      asdf.Add(323325);
      asdf.Add(327669);
      asdf.Add(328230);
      asdf.Add(389597);
      asdf.Add(389903);
      asdf.Add(389981);
      asdf.Add(393251);
      asdf.Add(393339);
      asdf.Add(394387);
      asdf.Add(394540);
      asdf.Add(394939);
      asdf.Add(395407);
      asdf.Add(396386);
      asdf.Add(396743);
      asdf.Add(396863);
      asdf.Add(397649);
      asdf.Add(398973);
      asdf.Add(609078);
      asdf.Add(388555);
      asdf.Add(513679);
      asdf.Add(514130);
      asdf.Add(514634);
      asdf.Add(517137);
      asdf.Add(518233);
      asdf.Add(520574);
      asdf.Add(331650);
      asdf.Add(332206);
      asdf.Add(332922);
      asdf.Add(334341);
      asdf.Add(335825);
      asdf.Add(337104);
      asdf.Add(338153);
      asdf.Add(339143);
      asdf.Add(513500);
      asdf.Add(243690);
      asdf.Add(244422);
      asdf.Add(246134);
      asdf.Add(246221);
      asdf.Add(246631);
      asdf.Add(247323);
      asdf.Add(247839);
      asdf.Add(251219);
      asdf.Add(252156);
      asdf.Add(252345);
      asdf.Add(252785);
      asdf.Add(252839);
      asdf.Add(253164);
      asdf.Add(166588);
      asdf.Add(166952);
      asdf.Add(172725);
      asdf.Add(469810);
      asdf.Add(470397);
      asdf.Add(472183);
      asdf.Add(472406);
      asdf.Add(473961);
      asdf.Add(474257);
      asdf.Add(387624);
      asdf.Add(500357);
      asdf.Add(501059);
      asdf.Add(502189);
      asdf.Add(502333);
      asdf.Add(502931);
      asdf.Add(503049);
      asdf.Add(503920);
      asdf.Add(504964);
      asdf.Add(508052);
      asdf.Add(509506);
      asdf.Add(509521);
      asdf.Add(240545);
      _Tree = new(degree, _OutputBuffer);
      _Producer = TreeProduce();
      _Consumer = GuiConsume();
      _ = TreeSetup();
#pragma warning disable CS8602 // Dereference of a possibly null reference.
      _Producer.Wait();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
    }

    [TearDown]
    public void Outro()
    {
      _Tree.Close();
    }

    /// <summary>
    /// Task creation for the tree object.
    /// </summary>
    /// <remarks>Author: Tristan Anderson</remarks>
    /// <returns>Task running the tree.</returns>
    private async Task TreeProduce()
    {
      while (await _InputBuffer.OutputAvailableAsync())
      {
        _InputBufferHistory.Add(_InputBuffer.Receive());
        switch (_InputBufferHistory.Last().action)
        {
#pragma warning disable CS8604 // Possible null reference argument.
          case TreeCommand.Tree:
            _Tree = new(_InputBufferHistory.Last().key, _OutputBuffer);
            break;
          case TreeCommand.Insert:
            _Tree.Insert(_InputBufferHistory.Last().key, _InputBufferHistory.Last().content);
            break;
          case TreeCommand.Delete:
            _Tree.Delete(_InputBufferHistory.Last().key);
            break;
          case TreeCommand.DeleteRange:
            _Tree.DeleteRange(_InputBufferHistory.Last().key, _InputBufferHistory.Last().endKey);
            break;
          case TreeCommand.Search:
            _Tree.Search(_InputBufferHistory.Last().key);
            break;
          case TreeCommand.SearchRange:
            _Tree.Search(_InputBufferHistory.Last().key, _InputBufferHistory.Last().endKey);
            break;
          case TreeCommand.Traverse:
            Console.Write(_Tree.Traverse());
            break;
          case TreeCommand.Close:
            _InputBuffer.Complete();
            break;
          default:// Will close buffer upon receiving a bad TreeCommand.
            Console.Write("TreeCommand:{0} not recognized", _InputBufferHistory.Last().action);
            break;
        }
        _InputBufferHistory.Clear();
#pragma warning restore CS8604 // Possible null reference argument.
      }
    }

    /// <summary>
    /// Task creation for the fake consumer "GUI" object.
    /// </summary>
    /// <remarks>Author: Tristan Anderson</remarks>
    /// <returns>Task running the GUI consumer.</returns>
    private async Task GuiConsume()
    {
      while (await _OutputBuffer.OutputAvailableAsync())
      {
        if (_OutputBuffer.Receive().status == NodeStatus.Close)
          _OutputBuffer.Complete();
      }
    }

    /// <summary>
    /// Part of setup to fill the tree object then close its thread.
    /// </summary>
    /// <returns></returns>
    private async Task TreeSetup()
    {
      Random random = new();
      int key = 0;
      //* Alternative Constant setup
      for (int i = 0; i < qwerty.Count; i++)
      {
        key = qwerty[i];
        await _InputBuffer.SendAsync((TreeCommand.Insert, key, -1, new(key.ToString())));
        keys.Add(key);
      }
      /*/
      for (int i = 0; i < _NumberOfKeys; i++)
      {
        do
        {
          key = random.Next(1, _NumberOfKeys * 1000);
        } while (keys.Contains(key));
        await _InputBuffer.SendAsync((TreeCommand.Insert, key, -1, new(key.ToString())));
        keys.Add(key);
      }
      //*/
      await _InputBuffer.SendAsync((TreeCommand.Close, 0, -1, null));
    }

    // [TestCase(1000)]
    [TestCase(10000)]
    // [TestCase(10000)]
    // [TestCase(10000)]
    // [TestCase(10000)]
    // [TestCase(10000)]
    // [TestCase(10000)]
    // [TestCase(10000)]
    public void BaseTest(int rangeSize)
    {
      Random random = new();
      int key, endKey, index, endIndex;
      List<(int key, Person content)> range = [];
      List<int> history = [], keyHistory = [];
      string insertionOrder = string.Join(',', keys);
      keys.Sort();
      //* Alternative Constant setup
      while (asdf.Count > 0)
      {
        index = keys.IndexOf(asdf[0]);
        key = asdf[0];
        /*/
      while (keys.Count > 0)
      {
        if (keys.Count - 1 == 0)
          index = 0;
        else
          index = random.Next(1, keys.Count - 1);
        key = keys[index];
        //*/
        keyHistory.Add(key);
        endKey = key + rangeSize;
        for (endIndex = index; endIndex < keys.Count && keys[endIndex] >= key && keys[endIndex] < endKey; endIndex++)
        {
          range.Add((keys[endIndex], new(keys[endIndex].ToString())));
          history.Add(keys[endIndex]);
        }
        for (int f = 0; f < range.Count; f++)
        {
          keys.RemoveAll(x => x == range[f].key);
          asdf.RemoveAll(x => x == range[f].key);
        }
        string deleteHstory = string.Join(',', history);
        for (int k = 0; k < keys.Count; k++)
        {
          var entry = _Tree.Search(keys[k]);
          if (entry == null)
            Assert.Fail($"The delete cycles started with {string.Join(',', keyHistory)}\nSearch turned up bogus for {keys[k]}\n{deleteHstory}\n\n{insertionOrder}");
        }
        _Tree.DeleteRange(key, endKey);
        Assert.That(_Tree.Search(key, endKey), Is.Empty, $"The delete cycles started with {string.Join(',', keyHistory)}\nSearch shouldnt exist for {key}\n{deleteHstory}\n\n{insertionOrder}");
        range.Clear();
      }
    }

    /// <summary>
    /// Read out just the portion of the keys[] currently in use.
    /// </summary>
    /// <param name="numKeys">Index to stop at.</param>
    /// <param name="keys">Array of ints</param>
    /// <returns>String of the keys seperated by a ','</returns>
    private static string StringifyKeys(int numKeys, int[] keys)
    {
      string result = "";
      for (int i = 0; i < numKeys; i++)
        result += keys[i] + (i + 1 == numKeys ? "" : ",");
      return result;
    }
  }
}